import os
import time
import random
import base64
import requests
import argparse
from functools import partial

__base_url__ = 'http://127.0.0.1:5000'
__unset__ = '__unset_value'
__test_images__ = [
    ('test1.png', ''),
    ('test2.png', ''),
    ('test3.png', ''),
]


def get(url, **kwargs):
    response = requests.get(__base_url__ + url, params=kwargs)
    return response.json()


def post(url, **kwargs):
    response = requests.post(__base_url__ + url, json=kwargs)
    if response.status_code == 204:
        return 'POST OK.'
    return response.json()


def post_file(url, filepath, name, mimetype):
    filename = os.path.basename(filepath)
    files = {name: (filename, open(filepath, 'rb'), mimetype)}
    response = requests.post(__base_url__ + url, files=files)
    if response.status_code == 204:
        return 'POST OK.'
    return response.json()


def delete(url):
    response = requests.delete(__base_url__ + url)
    if response.status_code == 204:
        return 'DELETE OK.'
    return response.json()


def get_random_id(url):
    return random.choice([obj['id'] for obj in get(url)])


def get_id(url, target):
    if target is None:
        return get_random_id(url)

    if target > 0:
        return target

    max_id = -1
    for obj in get(url):
        if obj['id'] > max_id:
            max_id = obj['id']

    result = max_id + 1 + target
    if result <= 0:
        raise ValueError("Invalid ID")
    return result


get_item_id = partial(get_id, '/api/items')
get_image_id = partial(get_id, '/api/images')
get_task_id = partial(get_id, '/api/tasks')


def get_item_params(name, description, weight, image_id):
    params = {}
    if name:
        params['name'] = name
    if description:
        params['description'] = None if description == __unset__ else description
    if weight:
        params['weight'] = None if weight == __unset__ else weight
    if image_id:
        params['image_id'] = None if image_id == __unset__ else image_id
    return params


def get_task_params(progress_pct, message, succeeded=None, failed=None):
    params = {}
    if progress_pct is not None:
        params['progress_pct'] = None if progress_pct == __unset__ else progress_pct
    if message is not None:
        params['message'] = None if message == __unset__ else message
    if succeeded:
        assert not failed
        params['finished'] = True
        params['successful'] = True
    elif failed:
        params['finished'] = True
        params['successful'] = False
    return params


def get_random_message():
    return random.choice([
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
        'Aenean eu purus id leo euismod sodales quis tincidunt risus.',
        'Nullam a mi vel magna condimentum eleifend.',
        'Curabitur mattis eros sit amet mi venenatis, id vehicula ipsum commodo.',
        'Donec eget leo consequat, viverra elit auctor, sollicitudin orci.',
        'Vivamus eu turpis lobortis tortor lobortis ultricies.',
        'Sed bibendum lectus et purus suscipit laoreet.',
        'Nam tincidunt sem vel cursus molestie.',
        'Nam molestie magna at dolor eleifend, pulvinar aliquet augue vestibulum.',
        'Donec tempus mi et eros dignissim porttitor.',
        'Suspendisse laoreet leo luctus lorem finibus, vel tincidunt augue congue.',
        'Vestibulum fringilla ex et tellus semper venenatis.',
        'Nulla posuere purus in porta tincidunt.',
        'In vel tellus fermentum, dictum arcu quis, lobortis purus.',
        'Mauris volutpat purus quis justo mollis, non gravida neque convallis.',
        'Cras pretium ipsum in lacus vestibulum auctor.',
        'Mauris aliquet purus eget lorem gravida condimentum.',
        'Etiam auctor nulla vitae tellus convallis elementum.',
        'Maecenas a mi at ante aliquam pulvinar at ac justo.',
        'Duis convallis nunc ut leo ornare viverra.',
        'Vestibulum malesuada ipsum lacinia nibh dignissim commodo in ut purus.',
        'Praesent placerat metus quis risus blandit convallis.',
        'Morbi a metus ultricies, convallis dolor nec, porttitor orci.',
        'Aenean vestibulum augue non purus dictum, quis efficitur eros maximus.',
        'Aliquam tempor augue at egestas ultricies.',
        'Cras vitae velit pretium, pellentesque orci ac, egestas diam.',
        'Praesent non leo vehicula, blandit justo ac, hendrerit justo.',
        'Praesent sed nunc sit amet enim maximus tempor.',
        'Sed quis lectus vel felis laoreet facilisis.',
        'Maecenas eu erat eget neque rutrum tincidunt.',
        'Etiam vitae nisl vel sem feugiat ullamcorper.',
        'Integer id purus pharetra, vestibulum turpis nec, rhoncus lorem.',
        'Aenean tristique mauris quis molestie tincidunt.',
        'Ut molestie tortor at nunc hendrerit, eu laoreet nibh fringilla.',
        'Fusce vel nunc et lacus porta egestas.',
        'Vivamus bibendum nulla nec lorem dapibus scelerisque.',
        'Integer vehicula diam dignissim mattis consequat.',
        'Integer ut sapien luctus, accumsan purus vel, hendrerit ipsum.',
    ])


def argtype_string(x):
    if x:
        if x.lower() == 'unset':
            return __unset__
        return x


def argtype_float(x):
    if x:
        if x.lower() == 'unset':
            return __unset__
        return float(x)


def argtype_image(x):
    if x:
        try:
            return int(x)
        except ValueError:
            if x.lower() == 'unset':
                return __unset__
            response = post_file('/api/images', x, 'image', 'image/png')
            print(response)
            return response['id']


def write_test_images(args):
    dirpath = os.path.join(os.path.dirname(__file__), 'instance')
    os.makedirs(dirpath, exist_ok=True)
    for filename, b64_str in __test_images__:
        filepath = os.path.join(dirpath, filename)
        if not os.path.isfile(filepath):
            with open(filepath, 'wb') as fp:
                fp.write(base64.b64decode(b64_str))
            print('Wrote instance/%s.' % filename)


def create_item(args):
    params = get_item_params(args.name, args.description, args.weight, args.image)
    item = post('/api/items', **params)
    print(item)


def update_item(args):
    item_id = get_item_id(args.item_id)
    params = get_item_params(args.name, args.description, args.weight, args.image)
    item = post('/api/items/%d' % item_id, **params)
    print(item)


def delete_item(args):
    item_id = get_item_id(args.item_id)
    response = delete('/api/items/%d' % item_id)
    print(response)


def create_image(args):
    response = post_file('/api/images', args.filename, 'image', 'image/png')
    print(response)


def replace_image(args):
    image_id = get_image_id(args.image_id)
    response = post_file('/api/images/%d' % image_id, args.filename, 'image', 'image/png')
    print(response)


def delete_image(args):
    response = delete('/api/images/%d' % args.image_id)
    print(response)


def create_task(args):
    item_id = get_item_id(args.item_id)
    response = post('/api/tasks', item_id=item_id, message=args.message)
    print(response)


def update_task(args):
    task_id = get_task_id(args.task_id)
    params = get_task_params(args.progress_pct, args.message, args.succeeded, args.failed)
    response = post('/api/tasks/%d' % task_id, **params)
    print(response)


def delete_task(args):
    task_id = get_task_id(args.task_id)
    response = delete('/api/tasks/%d' % task_id)
    print(response)


def run_task(args):
    # Create the task
    item_id = get_item_id(args.item_id)
    response = post('/api/tasks', item_id=item_id, message=args.message)
    print(response)
    task_id = response['id']

    # Determine how long the task should take to run
    if args.max_duration and args.max_duration > args.duration:
        duration = random.uniform(args.duration, args.max_duration)
    else:
        duration = args.duration

    # Update the task periodically
    elapsed = 0.0
    while elapsed < duration:
        message = get_random_message() if not args.message else None
        params = get_task_params(elapsed / duration, message)
        response = post('/api/tasks/%d' % task_id, **params)
        print(response)
        time.sleep(args.update_interval)
        elapsed += args.update_interval

    # When finished, complete the task
    if random.random() <= args.success_chance:
        params = get_task_params(1.0, None, succeeded=True)
    else:
        params = get_task_params(1.0, None, failed=True)
    response = post('/api/tasks/%d' % task_id, **params)
    print(response)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands', dest='command')

    parser_write_test_images = subparsers.add_parser('write-test-images')
    parser_write_test_images.set_defaults(func=write_test_images)

    parser_create_item = subparsers.add_parser('create-item')
    parser_create_item.add_argument('name')
    parser_create_item.add_argument('--description', '-d', type=argtype_string)
    parser_create_item.add_argument('--weight', '-w', type=argtype_float)
    parser_create_item.add_argument('--image', '-i', type=argtype_image)
    parser_create_item.set_defaults(func=create_item)

    parser_update_item = subparsers.add_parser('update-item')
    parser_update_item.add_argument('item_id', type=int)
    parser_update_item.add_argument('--name', '-n')
    parser_update_item.add_argument('--description', '-d', type=argtype_string)
    parser_update_item.add_argument('--weight', '-w', type=argtype_float)
    parser_update_item.add_argument('--image', '-i', type=argtype_image)
    parser_update_item.set_defaults(func=update_item)

    parser_delete_item = subparsers.add_parser('delete-item')
    parser_delete_item.add_argument('item_id', type=int)
    parser_delete_item.set_defaults(func=delete_item)

    parser_create_image = subparsers.add_parser('create-image')
    parser_create_image.add_argument('filename')
    parser_create_image.set_defaults(func=create_image)

    parser_replace_image = subparsers.add_parser('replace-image')
    parser_replace_image.add_argument('image_id', type=int)
    parser_replace_image.add_argument('filename')
    parser_replace_image.set_defaults(func=replace_image)

    parser_delete_image = subparsers.add_parser('delete-image')
    parser_delete_image.add_argument('image_id', type=int)
    parser_delete_image.set_defaults(func=delete_image)

    parser_create_task = subparsers.add_parser('create-task')
    parser_create_task.add_argument('item_id', type=int)
    parser_create_task.add_argument('--message', '-m')
    parser_create_task.set_defaults(func=create_task)

    parser_update_task = subparsers.add_parser('update-task')
    parser_update_task.add_argument('task_id', type=int)
    parser_update_task.add_argument('--progress-pct', '-p', type=argtype_float)
    parser_update_task.add_argument('--message', '-m', type=argtype_string)
    parser_update_task.add_argument('--succeeded', '-s', action='store_true')
    parser_update_task.add_argument('--failed', '-f', action='store_true')
    parser_update_task.set_defaults(func=update_task)

    parser_delete_task = subparsers.add_parser('delete-task')
    parser_delete_task.add_argument('task_id', type=int)
    parser_delete_task.set_defaults(func=delete_task)

    parser_run_task = subparsers.add_parser('run-task')
    parser_run_task.add_argument('--item-id', '-i', type=int)
    parser_run_task.add_argument('--success-chance', '-s', type=float, default=1.0)
    parser_run_task.add_argument('--duration', '-d', type=float, default=2.0)
    parser_run_task.add_argument('--max-duration', '-D', type=float)
    parser_run_task.add_argument('--update-interval', '-u', type=float, default=0.2)
    parser_run_task.add_argument('--message', '-m')
    parser_run_task.set_defaults(func=run_task)

    args = parser.parse_args()
    args.func(args)
